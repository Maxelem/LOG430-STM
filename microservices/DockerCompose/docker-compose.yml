services:
  nodecontroller:
    image: log430/nodecontroller:latest
    container_name: NodeController
    restart: always
    ports:
      - '${NODE_CONTROLLER_PORT}:8080'
      - '4300-4310:4300-4310'
    environment:
      TEAM_NAME: '${TEAM_NAME}'
      STUDENT_NAME: '${STUDENT_NAME}'
      GROUP: '${GROUP}'
      SECRET: '${SECRET}'
      INGRESS_ADDRESS: '${INGRESS_ADDRESS}'
      INGRESS_PORT: '${INGRESS_PORT}'
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      MQ_SERVICE_NAME: EventStream
      CUSTOM_CONTAINER_PORTS_DISCOVERY: 5672,5432,80
      BRIDGE_PORT: 32674
      # Trace > Information > Error
      Logging__LogLevel__Default: Information
      CONNECT_TO_INGRESS: true
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock

  event-store:
    container_name: EventStream
    image: cluster_mq
    restart: always
    hostname: EventStream
    build:
      context: ../ClusterRabbitMq/
      dockerfile: Dockerfile
    ports:
      - '32771:5672'
      - '30001:15672'
      - '25673:25672'
    environment:
      ID: EventStream
      RABBITMQ_ERLANG_COOKIE_FILE: /var/lib/rabbitmq/.erlang.cookie
    labels:
      Artifact_Category: Connector
      Replicas: EventStream

  routetimeprovider:
    container_name: RouteTimeProvider
    image: routetimeprovider
    restart: always
    build:
      context: ../RouteTimeProvider
      dockerfile: /RouteTimeProvider/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      ID: RouteTimeProvider
      API_KEY: '${TOMTOM}'
    ports:
      - '32772:8080'
    labels:
      ARTIFACT_CATEGORY: Computation

  tripcomparator:
    container_name: TripComparator
    image: tripcomparator
    restart: always
    build:
      context: ../TripComparator
      dockerfile: /Configuration/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      ID: TripComparator
      MQ_SERVICE_NAME: EventStream
    ports:
      - '32773:8080'
    labels:
      ARTIFACT_CATEGORY: Computation

  db:
    container_name: postgresdb
    image: postgres
    restart: always
    environment:
      ID: postgresdb
      POSTGRES_USER: '${USER}'
      POSTGRES_PASSWORD: '${PASSWORD}'
      POSTGRES_DB: '${DATABASE}'
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data
    labels:
      ARTIFACT_CATEGORY: Database

  stm:
    container_name: STM
    image: stm
    restart: always
    depends_on:
      - db
    build:
      context: ../STM
      dockerfile: /Configuration/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      ID: STM
      API_KEY: '${STM}'
      # HIGH (3gb) > MEDIUM (1.5gb) > LOW (300mb)
      MEMORY_CONSUMPTION: LOW
      DB_SERVER_ADDRESS: '${SERVER}'
      DB_PORT: '${PORT}'
      DB_NAME: '${DATABASE}'
      DB_USER: '${USER}'
      DB_PASSWORD: '${PASSWORD}'

    ports:
      - '32774:8080'
    labels:
      ARTIFACT_CATEGORY: Computation

volumes:
  db:
    driver: local